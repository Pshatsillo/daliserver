0. Contents
-----------

1. About
2. Installation
3. Running
4. Communication Protocol
5. Authors
6. References

1. About
--------

DALI (Digital Addressable Lighting Interface) is bus-based lamp control sytem,
standardized by the DALI working group (DALI-AG), a subsidiary of the German
ZVEI (Zentralverband Elektrotechnik- und Elektronikindustrie e.V.).
It allows a wide range of lighting control applications, such as switching
lamps in groups, automatic leveling in response to daylight intensity,
and integration into home automation systems.

daliserver is a command multiplexing server for the Tridonic DALI USB adapter,
allowing access to a DALI bus from any USB-equipped computer that supports
libusb. Note however that so far, only Linux and Mac OS X have been tested.

daliserver is copyright (c) 2011 by its authors (see below).
Licensing terms can be found in the file LICENSE that you should have received
with the program or source code.
The source code is hosted on https://github.com/onitake/daliserver

2. Installation
---------------

If you received daliserver in binary form, you can skip the next section and go
straight to "Running daliserver".

To compile daliserver, you need GNU autotools, a C99 compliant C compiler
with thread support, libusb 1.x, and associated development packages.
For Debian based Linux operating systems, you need to install
git build-essential autoconf libtool pkg-config libusb-1.0-0 libusb-1.0-0-dev

To generate the configure script and makefile templates, run
autoreconf -i
This should complete without error. If it doesn't, make sure all development
packages are installed.
Then run
./configure
Followed by
make
This should produce the daliserver binary in src/.

3. Running
----------

The recommended way of running daliserver is without command line options.
For specific network/port requirements and changing logging settings,
please refer to the manual page.

Certain operating systems require special procedures to allow access to
the DALI USB adapter. Tridonic chose to implement a device descriptor that
registers it as a human interface device (HID), so usermode access would be
possible on Microsoft Windows without a kernel mode driver.
On most other modern operating systems, HID devices are normally claimed by a
generic driver that handles human input. Since the adapter is not
actually a HID, special preparations are required on these systems.
On Linux, the generic HID driver supports a special command to detach it from
the device and allow a usermode program access. daliserver sends this command
during startup. On Mac OS X, such a function is not available, but there exists
another way to keep the driver from claiming the adapter. A dummy kernel
extension called DALIUSB.kext is shipped with the source code. Copy it to
/System/Library/Extensions and reboot your system. During the next
start, DALI USB will be registered with the generic USB driver instead of the
HID driver, allowing usermode access from daliserver (or other software).
It might also be necessary to change the device node permissions on certain
Linux variants, as they are normally restricted to super user access. If this
happens, daliserver will print out an error during startup. You may either run
it with superuser privileges (not recommended) or change the permissions of the
device. Read and write permissions are required. It is also possible to automate
this process with udev.

The perl/ subdirectory contains a number of example Perl scripts.
usbdali.pm is a Perl module that can handle construction of DALI messages and
communication with the daliserver. Some examples are provided too:
alloff.pl - Sends a turn off broadcast message
allon.pl - Sends a turn on broadcast message, but no light level (lamps might
still be at 0 after sending this)
allset.pl - Sends a lamp level broadcast message and displays the response
lampoff.pl - Sends a turn off command to a specific lamp
lampset.pl - Sends a level to a specific lamp

4. Communication protocol
-------------------------

To communicate with daliserver, you need to connect to it first.
If you didn't specify any options, it listens on TCP 127.0.0.1:55825

The protocol is simple, only two bytes are required: the bus address and the
command code. Note however that DALI uses a specific encoding scheme, the
address field is used for other purposes as well. Refer to perl/usbdali.pm
for example code on how to construct messages.

When not issuing commands, you can listen for messages from other devices
captured on the bus. These messages will come in the form:
  address:uint8_t
  command:uint8_t

To enqueue a command to be transmitted on the bus, just send this:
  address:uint8_t
  command:uint8_t

A response containing the return code from the target device will be sent back:
  response:uint8_t
  status:uint8_t
The status code is 0 for a succesful transfer or 1 if there was an error.
If the target device sent a response, it will be set in the response field.

There is no padding, all messages have a fixed size of 2 bytes.

eDALI commands aren't supported for now.

5. Authors
----------

Gregor Riepl <onitake@gmail.com>
Johannes WÃ¼thrich <johannes@deragent.net>

6. References
-------------

http://www.dali-ag.org - DALI working group homepage
IEC 62386 - The official standard (requires fee)
http://www.tridonic.com/com/en/2192.asp - Tridonic masterCONFIGURATOR software
for Microsoft Windows, was used to reverse engineer the communication protocol
with DALI USB and to test out DALI commands
http://www.siwawi.arubi.uni-kl.de/avr_projects/dali/index.html
AVR microcontroller DALI implementation, contains lots of useful links
